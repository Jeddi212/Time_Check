package com;

//import static com.ForWhile.*;

//import static com.Recursive.*;

import static com.MergeSort.*;

public class Main {

    // GLOBAL VARIABLE
    static int N = 100_000;

    static int[] arr10 = {928, 800, 388, 5, 140, 922, 704, 390, 867, 424};

    static int[] arr100 = {674, 881, 351, 383, 581, 650, 895, 8, 985, 296, 396, 142, 709, 678, 220, 127, 312, 702, 819, 235, 371, 188, 77, 40, 671, 124, 990, 968, 569, 813, 236, 481, 498, 321, 305, 186, 21, 259, 841, 117, 362, 136, 662, 195, 912, 847, 418, 279, 886, 73, 251, 51, 558, 832, 883, 934, 815, 480, 437, 133, 696, 478, 134, 938, 885, 239, 389, 407, 138, 619, 471, 205, 581, 280, 527, 940, 702, 98, 316, 351, 894, 505, 545, 233, 551, 1, 122, 528, 473, 991, 862, 715, 36, 600, 821, 424, 921, 901, 745, 971};

    static int[] arr1000 = {133, 377, 943, 487, 95, 951, 293, 147, 737, 709, 725, 573, 231, 812, 230, 625, 80, 21, 256, 274, 562, 106, 904, 375, 581, 154, 411, 892, 757, 549, 523, 109, 713, 606, 289, 365, 55, 37, 119, 496, 519, 884, 175, 335, 35, 946, 87, 524, 854, 44, 707, 331, 420, 500, 440, 708, 351, 299, 694, 613, 271, 392, 439, 901, 901, 203, 984, 32, 300, 446, 350, 618, 549, 882, 760, 814, 825, 676, 332, 894, 169, 31, 370, 86, 289, 103, 640, 656, 68, 659, 88, 431, 733, 153, 693, 260, 889, 56, 313, 623, 914, 458, 121, 834, 743, 373, 66, 982, 780, 165, 273, 87, 6, 511, 431, 929, 965, 18, 90, 664, 253, 940, 478, 678, 839, 14, 975, 437, 25, 23, 437, 821, 585, 679, 342, 338, 855, 885, 408, 320, 563, 843, 589, 452, 616, 969, 534, 244, 461, 759, 770, 738, 223, 230, 115, 272, 923, 480, 95, 155, 568, 587, 849, 826, 612, 274, 110, 595, 67, 238, 294, 406, 299, 634, 620, 697, 726, 493, 794, 605, 288, 625, 512, 9, 841, 438, 595, 287, 381, 809, 359, 535, 330, 262, 284, 120, 759, 330, 358, 469, 923, 670, 643, 934, 622, 346, 860, 181, 702, 753, 223, 768, 663, 211, 399, 887, 751, 975, 813, 385, 223, 143, 58, 606, 558, 806, 854, 526, 676, 214, 290, 552, 83, 305, 611, 254, 510, 492, 597, 843, 616, 351, 825, 60, 685, 842, 407, 354, 73, 650, 616, 767, 910, 187, 568, 722, 660, 482, 512, 766, 555, 759, 161, 837, 913, 283, 951, 176, 717, 343, 467, 599, 384, 936, 204, 561, 103, 954, 473, 266, 21, 859, 165, 867, 184, 363, 459, 16, 239, 393, 452, 220, 465, 506, 508, 487, 176, 805, 511, 71, 986, 126, 405, 521, 577, 410, 147, 439, 834, 542, 143, 345, 307, 423, 228, 833, 279, 874, 390, 356, 160, 379, 190, 91, 71, 420, 789, 856, 33, 782, 31, 74, 197, 600, 910, 205, 889, 587, 808, 305, 274, 657, 671, 683, 636, 861, 730, 515, 589, 995, 777, 618, 716, 39, 550, 549, 665, 982, 278, 816, 160, 406, 133, 740, 914, 796, 394, 793, 955, 140, 514, 189, 556, 946, 239, 792, 484, 992, 884, 97, 683, 404, 892, 47, 7, 297, 733, 294, 827, 583, 568, 285, 353, 402, 956, 401, 207, 844, 205, 697, 786, 841, 667, 516, 439, 434, 535, 954, 661, 24, 134, 452, 299, 220, 460, 567, 362, 519, 959, 80, 28, 344, 228, 838, 795, 188, 849, 193, 694, 407, 861, 521, 391, 152, 872, 679, 196, 134, 941, 821, 109, 509, 127, 375, 632, 642, 558, 580, 443, 424, 654, 309, 90, 155, 643, 78, 524, 719, 36, 160, 308, 79, 941, 635, 902, 556, 228, 136, 488, 89, 216, 192, 884, 282, 732, 513, 488, 348, 921, 690, 442, 498, 514, 18, 363, 123, 170, 773, 26, 103, 694, 814, 642, 228, 93, 966, 871, 228, 888, 680, 740, 477, 256, 846, 945, 806, 354, 503, 320, 404, 582, 779, 8, 718, 869, 131, 163, 855, 189, 984, 541, 0, 90, 221, 554, 235, 490, 530, 409, 684, 186, 926, 968, 741, 235, 185, 38, 68, 321, 961, 783, 394, 959, 784, 837, 9, 621, 634, 641, 194, 980, 177, 314, 805, 301, 89, 558, 182, 621, 727, 128, 196, 142, 517, 277, 616, 232, 633, 711, 619, 115, 714, 473, 800, 718, 737, 268, 113, 937, 104, 140, 201, 329, 563, 541, 133, 245, 636, 697, 945, 553, 637, 222, 431, 197, 411, 433, 330, 370, 5, 854, 504, 72, 928, 888, 383, 369, 732, 510, 596, 388, 961, 169, 508, 440, 999, 91, 808, 580, 590, 271, 148, 668, 101, 770, 224, 19, 709, 80, 524, 849, 276, 362, 485, 162, 170, 125, 530, 269, 323, 917, 331, 977, 355, 697, 582, 716, 267, 221, 808, 485, 383, 372, 646, 761, 821, 840, 985, 960, 45, 486, 56, 661, 836, 279, 174, 476, 611, 286, 930, 397, 361, 663, 303, 381, 699, 795, 574, 728, 853, 823, 789, 806, 176, 702, 112, 222, 523, 148, 760, 476, 293, 446, 795, 800, 117, 70, 81, 21, 647, 884, 222, 383, 803, 975, 853, 87, 862, 541, 817, 539, 867, 270, 406, 409, 264, 606, 838, 43, 424, 947, 43, 412, 722, 395, 75, 356, 754, 307, 257, 712, 281, 301, 683, 319, 670, 482, 180, 632, 63, 511, 846, 680, 747, 470, 80, 217, 409, 661, 884, 269, 262, 763, 481, 680, 247, 199, 43, 631, 585, 511, 908, 31, 967, 282, 765, 114, 981, 719, 832, 1000, 0, 151, 287, 128, 1, 975, 807, 683, 31, 939, 666, 948, 68, 214, 469, 522, 355, 46, 74, 556, 835, 358, 517, 809, 643, 362, 678, 902, 785, 7, 22, 122, 728, 338, 622, 315, 552, 14, 146, 197, 882, 299, 290, 514, 599, 117, 332, 604, 944, 692, 562, 415, 741, 712, 95, 983, 182, 20, 924, 130, 814, 552, 211, 100, 511, 454, 472, 58, 829, 685, 151, 939, 703, 692, 874, 482, 363, 934, 989, 584, 94, 250, 497, 809, 787, 716, 533, 708, 834, 635, 510, 501, 207, 361, 793, 294, 430, 307, 52, 903, 375, 504, 12, 904, 133, 845, 791, 851, 386, 525, 843, 253, 283, 618, 614, 587, 322, 337, 55, 445, 779, 449, 871, 66, 891, 519, 444, 428, 435, 676, 443, 544, 497, 511, 294, 876, 135, 754, 554, 697, 999, 863, 871, 776, 265, 683, 393, 302, 944, 547, 940, 279, 811, 982, 406, 976, 95, 475, 11, 79, 370, 266, 190, 704, 156, 375, 65, 863, 61, 303, 138, 937, 745, 669, 780, 857, 228, 39, 361, 503, 288, 266, 357, 284, 271, 436, 442, 877, 172, 579, 867, 165, 897, 968, 577, 267, 895, 850, 138, 803, 738, 795, 215, 468, 592, 986, 644, 189, 824, 828, 36, 586, 342, 946, 580, 803, 269, 704, 671, 547, 28, 424, 443, 908, 804, 35, 853, 407, 10};

    // PRINT MEMORY USAGE
    private static void printMemory() {
        // Get the Java runtime
        Runtime runtime = Runtime.getRuntime();
        // Calculate the used memory
        long memory = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Used memory is bytes: " + memory);
    }

    // PSV MAIN
    public static void main(String[] args) {
        // FOR
        /*checkFOR();
        System.out.println();

        // WHILE
        checkWhile();
        printMemory();*/

        // RECURSIVE
        /*checkRecursive();
        System.out.println();*/

        // MERGE SORT
        checkMergeSort(N, arr1000);

    }
}
